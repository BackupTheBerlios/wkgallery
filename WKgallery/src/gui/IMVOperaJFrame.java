package gui;

import abstractlayer.Artista;
import abstractlayer.Opera;
import filefilter.ImmagineFileFilter;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.DecimalFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * La finestra per l'Inserimento, Modifica e Visualizzazione di un'opera.
 * @author Marco Celesti
 */
public class IMVOperaJFrame extends javax.swing.JFrame {

    private static IMVOperaJFrame imvOpera = null;
    private Opera opera = null;
    private String titoloFinestra = "";
    private Vector<Artista> artisti = null;
    private boolean initialized = false;
    private boolean nuovaOpera = false;
    private DecimalFormat df = new DecimalFormat("#0.00");

    /**
     * La classe implementa il pattern Singleton.
     * @return l'istanza di tipo statico della classe
     */
    public static IMVOperaJFrame getInstance() {
        if (imvOpera == null) {
            imvOpera = new IMVOperaJFrame();
        }
        return imvOpera;
    }

    /** Costruttore privato di IMVOperaJFrame */
    private IMVOperaJFrame() {
    }

    /**
     * Metodo <i>set</i> per <code>opera</code>.
     * @param opera l'opera
     */
    public void setOpera(Opera opera) {
        this.opera = opera;
    }
    
    /**
     * Metodo <i>get</i> per <code>opera</code>.
     * @return l'opera
     */
    public Opera getOpera() {
        return opera;
    }

    /**
     * Metodo <i>set</i> per <code>artisti</code>.
     * @param artisti il vettore di artisti presenti in galleria
     */
    public void setArtisti(Vector<Artista> artisti) {
        this.artisti = artisti;
    }

    /**
     * Inizializza il JFrame
     * @param nuovaOpera true se l'operazione da effettuare è di inserimento
     */
    public void init(boolean nuovaOpera) {
        this.nuovaOpera = nuovaOpera;
        if (!nuovaOpera) {
            titoloFinestra = "Modifica dell'opera '" + opera.getTitolo() + "'";
        } else {
            titoloFinestra = "Nuova opera";
        }
        if (!initialized) {
            initComponents();
            initialized = true;
        }
        initValues();
    }

    /**
     * Imposta <code>editable</code> la proprietà editable di JTextField e JTextArea del JFrame
     * @param editable
     */
    public void setEditable(boolean editable) {
        titolojTextField.setEditable(editable);
        tecnicajTextField.setEditable(editable);
        dimensionijTextField.setEditable(editable);
        tipojTextField.setEditable(editable);
        prezzojTextField.setEditable(editable);
        artistajComboBox.setEnabled(editable);
        scegliImmaginejButton.setVisible(editable);
        salvajButton.setVisible(editable);
        if (!editable) {
            cancellajButton.setText("Ok");
        } else {
            cancellajButton.setText("Cancella");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codiceOperajLabel = new javax.swing.JLabel();
        artistajLabel = new javax.swing.JLabel();
        titolojLabel = new javax.swing.JLabel();
        tecnicajLabel = new javax.swing.JLabel();
        codiceOperajTextField = new javax.swing.JTextField();
        titolojTextField = new javax.swing.JTextField();
        artistajComboBox = new javax.swing.JComboBox();
        tecnicajTextField = new javax.swing.JTextField();
        dimensionijLabel = new javax.swing.JLabel();
        tipojLabel = new javax.swing.JLabel();
        prezzojLabel = new javax.swing.JLabel();
        scegliImmaginejLabel = new javax.swing.JLabel();
        dimensionijTextField = new javax.swing.JTextField();
        tipojTextField = new javax.swing.JTextField();
        prezzojTextField = new javax.swing.JTextField();
        salvajButton = new javax.swing.JButton();
        cancellajButton = new javax.swing.JButton();
        immaginejTextField = new javax.swing.JTextField();
        scegliImmaginejButton = new javax.swing.JButton();
        eurojLabel = new javax.swing.JLabel();
        visualizzaImmaginejButton = new javax.swing.JButton();
        campiObbligatorijLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        codiceOperajLabel.setText("Codice Opera*:");

        artistajLabel.setText("Artista*:");

        titolojLabel.setText("Titolo*:");

        tecnicajLabel.setText("Tecnica:");

        codiceOperajTextField.setEditable(false);

        artistajComboBox.setModel(new javax.swing.DefaultComboBoxModel(artisti));

        dimensionijLabel.setText("Dimensioni (larghezza x altezza):");

        tipojLabel.setText("Tipo:");

        prezzojLabel.setText("Prezzo:");

        scegliImmaginejLabel.setText("Scegli immagine:");

        prezzojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                prezzojTextFieldKeyTyped(evt);
            }
        });

        salvajButton.setText("Salva");
        salvajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvajButtonActionPerformed(evt);
            }
        });

        cancellajButton.setText("Cancella");
        cancellajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancellajButtonActionPerformed(evt);
            }
        });

        immaginejTextField.setEditable(false);

        scegliImmaginejButton.setText("Scegli:");
        scegliImmaginejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scegliImmaginejButtonActionPerformed(evt);
            }
        });

        eurojLabel.setText("€");

        visualizzaImmaginejButton.setText("Visualizza");
        visualizzaImmaginejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizzaImmaginejButtonActionPerformed(evt);
            }
        });

        campiObbligatorijLabel.setText("* Campi obbligatori");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(salvajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                        .addComponent(cancellajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(codiceOperajLabel)
                            .addComponent(artistajLabel)
                            .addComponent(titolojLabel)
                            .addComponent(tecnicajLabel)
                            .addComponent(dimensionijLabel)
                            .addComponent(tipojLabel)
                            .addComponent(prezzojLabel)
                            .addComponent(scegliImmaginejLabel))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(tipojTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addComponent(dimensionijTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addComponent(tecnicajTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addComponent(titolojTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addComponent(artistajComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(codiceOperajTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(eurojLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(prezzojTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                            .addComponent(scegliImmaginejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(immaginejTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(visualizzaImmaginejButton, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                    .addComponent(campiObbligatorijLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codiceOperajLabel)
                    .addComponent(codiceOperajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(artistajLabel)
                    .addComponent(artistajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titolojLabel)
                    .addComponent(titolojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tecnicajLabel)
                    .addComponent(tecnicajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dimensionijLabel)
                    .addComponent(dimensionijTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipojLabel)
                    .addComponent(tipojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prezzojLabel)
                    .addComponent(eurojLabel)
                    .addComponent(prezzojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scegliImmaginejLabel)
                    .addComponent(scegliImmaginejButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(visualizzaImmaginejButton)
                    .addComponent(immaginejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(campiObbligatorijLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvajButton)
                    .addComponent(cancellajButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Inizializza i valori dell'opera qualora l'operazione non sia di inserimento, ma di modifica o visualizzazione
     */
    private void initValues() {
        artistajComboBox.setModel(new javax.swing.DefaultComboBoxModel(artisti));
        if (!nuovaOpera) {
            codiceOperajTextField.setText("" + opera.getCodiceOpera());
            titolojTextField.setText(opera.getTitolo());
            tecnicajTextField.setText(opera.getTecnica());
            dimensionijTextField.setText(opera.getDimensioni());
            tipojTextField.setText(opera.getTipo());
            if (opera.getPrezzo() != -1) {
                prezzojTextField.setText(df.format(opera.getPrezzo()));
            } else {
                prezzojTextField.setText("");
            }
            artistajComboBox.setSelectedItem(opera.getArtista());
            if (opera.getFoto() != null) {
                immaginejTextField.setText(opera.getFoto().getPath());
                visualizzaImmaginejButton.setEnabled(true);
            } else {
                immaginejTextField.setText("");
                visualizzaImmaginejButton.setEnabled(false);
            }
        } else {
            codiceOperajTextField.setText("");
            titolojTextField.setText("");
            tecnicajTextField.setText("");
            dimensionijTextField.setText("");
            tipojTextField.setText("");
            prezzojTextField.setText("");
            artistajComboBox.setSelectedItem(artisti.firstElement());
            immaginejTextField.setText("");
            visualizzaImmaginejButton.setEnabled(false);
        }
        this.setTitle(titoloFinestra);
    }

    /**
     * Action performed per il bottone "Scegli:"
     * @param evt
     */
private void scegliImmaginejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scegliImmaginejButtonActionPerformed
    JFileChooser immagineChooser = new JFileChooser();
    File imgFile = null;
    String imgPath = null;
    try {
        // Create a File object containing the canonical path of the
        // desired directory
        File current = new File(new File(".").getCanonicalPath());

        // Set the current directory
        immagineChooser.setCurrentDirectory(current);
    } catch (IOException e) {
    }
    immagineChooser.addChoosableFileFilter(new ImmagineFileFilter());
    immagineChooser.setDialogTitle("Seleziona l'immagine");
    immagineChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    int returnVal = immagineChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        imgFile = immagineChooser.getSelectedFile();
        imgPath = imgFile.getPath();
        immaginejTextField.setText(imgPath);
        visualizzaImmaginejButton.setEnabled(true);
    } else if (returnVal == JFileChooser.CANCEL_OPTION) {
    }
}//GEN-LAST:event_scegliImmaginejButtonActionPerformed

    /**.
     * Action performed per il bottone "Visualizza"
     * @param evt
     */
private void visualizzaImmaginejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizzaImmaginejButtonActionPerformed
    if (Desktop.getDesktop().isSupported(Desktop.Action.OPEN)) {
        if (!immaginejTextField.getText().isEmpty()) {
            try {
                String path = immaginejTextField.getText().replaceAll("%2520", " ");
                File imgFile = new File(path);
                Desktop.getDesktop().open(imgFile);
            } catch (MalformedURLException ex) {
                Logger.getLogger(IMVOperaJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(IMVOperaJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Operazione non supportata", "Errore", JOptionPane.ERROR_MESSAGE);
    }

}//GEN-LAST:event_visualizzaImmaginejButtonActionPerformed

    /**
     * Action performed per il bottone "Salva"
     * @param evt
     */
private void salvajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvajButtonActionPerformed
    if (checkFields()) {
        opera.setArtista((Artista) artistajComboBox.getSelectedItem());
        opera.setDimensioni(dimensionijTextField.getText());
        if (!prezzojTextField.getText().isEmpty()) {
            String prezzoString = prezzojTextField.getText();
            prezzoString = prezzoString.replaceAll(",", ".");
            opera.setPrezzo(Float.parseFloat(prezzoString));
        }
        opera.setTecnica(tecnicajTextField.getText());
        opera.setTipo(tipojTextField.getText());
        opera.setTitolo(titolojTextField.getText());
        if (!immaginejTextField.getText().isEmpty()) {
            try {
                File imgFile = new File(immaginejTextField.getText());
                opera.setFoto(imgFile.toURI().toURL());
            } catch (MalformedURLException ex) {
                Logger.getLogger(IMVOperaJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        firePropertyChange("salva_opera", null, null);
    }
}//GEN-LAST:event_salvajButtonActionPerformed

    /**
     * Action performed per il bottone "Cancella"
     * @param evt
     */
private void cancellajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancellajButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_cancellajButtonActionPerformed

    /**
     * Impedisce la digitazione di caratteri diversi da cifre e da '.'
     * @param evt
     */
private void prezzojTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_prezzojTextFieldKeyTyped
    char c = evt.getKeyChar();
    if ((!(c >= 48 && c <= 57)) && (c != 46)) {
        evt.setKeyChar('\u0008');
    }
}//GEN-LAST:event_prezzojTextFieldKeyTyped

    /**
     * Verifica la correttezza dei campi e il rispetto di quelli obbligatori
     * @return true se la verifica va a buon fine
     */
    private boolean checkFields() {
        if (!prezzojTextField.getText().isEmpty()) {
            try {
                String prezzoString = prezzojTextField.getText();
                prezzoString = prezzoString.replaceAll(",", ".");
                Float.parseFloat(prezzoString);
            } catch (NumberFormatException bfe) {
                JOptionPane.showMessageDialog(this, "Il campo 'Prezzo' risulta scorretto.\nSi prega di correggere.", "Errore", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (titolojTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Il campo obbligatorio 'Titolo' non è stato compilato.", "Errore", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox artistajComboBox;
    private javax.swing.JLabel artistajLabel;
    private javax.swing.JLabel campiObbligatorijLabel;
    private javax.swing.JButton cancellajButton;
    private javax.swing.JLabel codiceOperajLabel;
    private javax.swing.JTextField codiceOperajTextField;
    private javax.swing.JLabel dimensionijLabel;
    private javax.swing.JTextField dimensionijTextField;
    private javax.swing.JLabel eurojLabel;
    private javax.swing.JTextField immaginejTextField;
    private javax.swing.JLabel prezzojLabel;
    private javax.swing.JTextField prezzojTextField;
    private javax.swing.JButton salvajButton;
    private javax.swing.JButton scegliImmaginejButton;
    private javax.swing.JLabel scegliImmaginejLabel;
    private javax.swing.JLabel tecnicajLabel;
    private javax.swing.JTextField tecnicajTextField;
    private javax.swing.JLabel tipojLabel;
    private javax.swing.JTextField tipojTextField;
    private javax.swing.JLabel titolojLabel;
    private javax.swing.JTextField titolojTextField;
    private javax.swing.JButton visualizzaImmaginejButton;
    // End of variables declaration//GEN-END:variables
}
