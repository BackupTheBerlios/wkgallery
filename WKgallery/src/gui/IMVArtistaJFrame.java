package gui;

import abstractlayer.Artista;
import java.awt.Color;
import javax.swing.JOptionPane;

/**
 * La finestra per l'Inserimento, Modifica e Visualizzazione di un artista.
 * @author  Marco Celesti
 */
public class IMVArtistaJFrame extends javax.swing.JFrame {

    private static IMVArtistaJFrame imvArtista = null;
    private Artista artista = null;
    private String titoloFinestra = "";
    private boolean initialized = false;
    private boolean nuovoArtista = false;

    /**
     * La classe implementa il pattern Singleton.
     * @return l'istanza di tipo statico della classe
     */
    public static IMVArtistaJFrame getInstance() {
        if (imvArtista == null) {
            imvArtista = new IMVArtistaJFrame();
        }
        return imvArtista;
    }

    /** Costruttore privato di IMVArtistaJFrame */
    private IMVArtistaJFrame() {
    }

    /**
     * Metodo <i>set</i> per <code>artista</code>.
     * @param artista l'artista
     */
    public void setArtista(Artista artista) {
        this.artista = artista;
    }

    /**
     * Metodo <i>get</i> per <code>artista</code>.
     * @return l'artista
     */
    public Artista getArtista() {
        return artista;
    }

    /**
     * Inizializza il JFrame
     * @param nuovoArtista true se l'operazione da effettuare è di inserimento
     */
    public void init(boolean nuovoArtista) {
        this.nuovoArtista = nuovoArtista;
        if (!nuovoArtista) {
            titoloFinestra = "Modifica dell'artista '" + artista.toString() + "'";
        } else {
            titoloFinestra = "Nuovo artista";
        }
        if (!initialized) {
            initComponents();
            initialized = true;
        }
        initValues();
    }

    /**
     * Imposta <code>editable</code> la proprietà editable di JTextField e JTextArea del JFrame
     * @param editable
     */
    public void setEditable(boolean editable) {
        cognomejTextField.setEditable(editable);
        nomejTextField.setEditable(editable);
        noteBiojTextArea.setEditable(editable);
        salvajButton.setVisible(editable);
        if (!editable) {
            cancellajButton.setText("Ok");
            noteBiojTextArea.setBackground(new Color(224, 223, 227));
        } else {
            cancellajButton.setText("Cancella");
            noteBiojTextArea.setBackground(Color.WHITE);
        }
        this.setTitle(titoloFinestra);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codiceArtistajLabel = new javax.swing.JLabel();
        cognomejLabel = new javax.swing.JLabel();
        nomejLabel = new javax.swing.JLabel();
        noteBiojLabel = new javax.swing.JLabel();
        codiceArtistajTextField = new javax.swing.JTextField();
        cognomejTextField = new javax.swing.JTextField();
        nomejTextField = new javax.swing.JTextField();
        jScrollPane = new javax.swing.JScrollPane();
        noteBiojTextArea = new javax.swing.JTextArea();
        salvajButton = new javax.swing.JButton();
        cancellajButton = new javax.swing.JButton();
        campiObbligatorijLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        codiceArtistajLabel.setText("Codice artista*:");

        cognomejLabel.setText("Cognome*:");

        nomejLabel.setText("Nome:");

        noteBiojLabel.setText("Note biografiche:");

        codiceArtistajTextField.setEditable(false);

        noteBiojTextArea.setColumns(20);
        noteBiojTextArea.setFont(new java.awt.Font("Tahoma", 0, 11));
        noteBiojTextArea.setRows(5);
        jScrollPane.setViewportView(noteBiojTextArea);

        salvajButton.setText("Salva");
        salvajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvajButtonActionPerformed(evt);
            }
        });

        cancellajButton.setText("Cancella");
        cancellajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancellajButtonActionPerformed(evt);
            }
        });

        campiObbligatorijLabel.setText("* Campi obbligatori");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(salvajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                        .addComponent(cancellajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteBiojLabel)
                            .addComponent(nomejLabel)
                            .addComponent(cognomejLabel)
                            .addComponent(codiceArtistajLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(codiceArtistajTextField)
                            .addComponent(cognomejTextField)
                            .addComponent(nomejTextField)
                            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)))
                    .addComponent(campiObbligatorijLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codiceArtistajLabel)
                    .addComponent(codiceArtistajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cognomejLabel)
                    .addComponent(cognomejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomejLabel)
                    .addComponent(nomejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noteBiojLabel)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(campiObbligatorijLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvajButton)
                    .addComponent(cancellajButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Inizializza i valori dell'artista qualora l'operazione non sia di inserimento, ma di modifica o visualizzazione
     */
    private void initValues() {
        if (!nuovoArtista) {
            codiceArtistajTextField.setText("" + artista.getCodiceArtista());
            cognomejTextField.setText(artista.getCognome());
            nomejTextField.setText(artista.getNome());
            noteBiojTextArea.setText(artista.getNoteBiografiche());
        } else {
            codiceArtistajTextField.setText("");
            cognomejTextField.setText("");
            nomejTextField.setText("");
            noteBiojTextArea.setText("");
        }
    }
    
    /**
     * Action performed per il bottone "Salva"
     * @param evt
     */
private void salvajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvajButtonActionPerformed
    if (checkFields()) {
        artista.setCognome(cognomejTextField.getText());
        artista.setNome(nomejTextField.getText());
        artista.setNoteBiografiche(noteBiojTextArea.getText());
        firePropertyChange("salva_artista", null, null);
    }
}//GEN-LAST:event_salvajButtonActionPerformed

    /**
     * Action performed per il bottone "Cancella"
     * @param evt
     */
private void cancellajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancellajButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_cancellajButtonActionPerformed

    /**
     * Verifica il rispetto dei campi obbligatori
     * @return true se la verifica va a buon fine
     */
    private boolean checkFields() {
        if (cognomejTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Il campo obbligatorio 'Cognome' non è stato compilato.", "Errore", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel campiObbligatorijLabel;
    private javax.swing.JButton cancellajButton;
    private javax.swing.JLabel codiceArtistajLabel;
    private javax.swing.JTextField codiceArtistajTextField;
    private javax.swing.JLabel cognomejLabel;
    private javax.swing.JTextField cognomejTextField;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel nomejLabel;
    private javax.swing.JTextField nomejTextField;
    private javax.swing.JLabel noteBiojLabel;
    private javax.swing.JTextArea noteBiojTextArea;
    private javax.swing.JButton salvajButton;
    // End of variables declaration//GEN-END:variables
}
