package gui;

import abstractlayer.Cliente;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import tablemodels.EmailTableModel;

/**
 * Finestra contenente l'elenco di indirizzi cui inviare une email.
 * @author  Marco Celesti
 */
public class EmailMultipleJFrame extends javax.swing.JFrame {

    private static EmailMultipleJFrame emailMultiple = null;
    private EmailTableModel emailModel = new EmailTableModel();
    private TableColumn col = null;
    private Vector<Cliente> clienti = new Vector<Cliente>();
    private Vector<Cliente> clientiSelezionati = new Vector<Cliente>();
    private  boolean initialized = false;

    /**
     * La classe implementa il pattern Singleton.
     * @return l'istanza di tipo statico della classe
     */
    public static EmailMultipleJFrame getInstance() {
        if (emailMultiple == null) {
            emailMultiple = new EmailMultipleJFrame();
        }
        return emailMultiple;
    }

    /** Costruttore privato di EmailMultipleJFrame */
    private EmailMultipleJFrame() {
    }

    /**
     * Inizializza il JFrame
     */
    public void init() {
        if (!initialized) {
            initComponents();
            initialized = true;
        }
    }

    /**
     * Aggiorna la tabella dei clienti, inserendo solo i clienti con almeno un indirizzo mail
     * @param clienti i clienti con cui riempire la tabella
     */
    public void updateClientijTable(Vector<Cliente> clienti) {
        this.clienti = clienti;
        resetjTable(emailModel);
        if (clienti.size() > 0) {
            for (Cliente cliente : clienti) {
                boolean hasEmail = false;
                if (!cliente.getMail1().isEmpty() || !cliente.getMail2().isEmpty()) {
                    hasEmail = true;
                }
                if (hasEmail) {
                    emailModel.addRow(new Object[]{cliente.getCodiceCliente(), cliente.getCognRsoc1(), cliente.getNomeRsoc2(), true});
                }
            }
        }
    }

    /**
     * Svuota la tabella
     * @param t il DefaultTableModel
     */
    private void resetjTable(DefaultTableModel t) {
        int j = t.getRowCount();
        for (int k = 0; k < j; k++) {
            t.removeRow(0);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        clientijTable = new javax.swing.JTable();
        okjButton = new javax.swing.JButton();
        cancellajButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleziona i clienti a cui inviare la mail");
        setResizable(false);

        emailModel.addColumn("ID");
        emailModel.addColumn("Cognome");
        emailModel.addColumn("Nome");
        emailModel.addColumn("Selezionato");
        clientijTable.setModel(emailModel);
        clientijTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        col = clientijTable.getColumnModel().getColumn(0);
        col.setPreferredWidth(40);

        col = clientijTable.getColumnModel().getColumn(1);
        col.setPreferredWidth(130);

        col = clientijTable.getColumnModel().getColumn(2);
        col.setPreferredWidth(120);

        col = clientijTable.getColumnModel().getColumn(3);
        col.setPreferredWidth(60);
        clientijTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(clientijTable);

        okjButton.setText("Ok");
        okjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okjButtonActionPerformed(evt);
            }
        });

        cancellajButton.setText("Cancella");
        cancellajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancellajButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancellajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okjButton)
                    .addComponent(cancellajButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action performed per il bottone "Ok"
     * @param evt
     */
private void okjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okjButtonActionPerformed
    for (int i = 0; i < emailModel.getRowCount(); i++) {
        Boolean checked = false;
        Object boolObj = emailModel.getValueAt(i, 3);
        if (boolObj instanceof Boolean) {
            checked = (Boolean) boolObj;
        }
        if (checked) {
            clientiSelezionati.add(clienti.get(i));
        }
    }
    firePropertyChange("clienti_selezionati", null, null);
}//GEN-LAST:event_okjButtonActionPerformed

    /**
     * Action performed per il bottone "Cancella"
     * @param evt
     */
private void cancellajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancellajButtonActionPerformed
    this.dispose();
}//GEN-LAST:event_cancellajButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancellajButton;
    private javax.swing.JTable clientijTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okjButton;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Restituisce il vettore con i clienti selezionati
     * @return i clienti selezionati
     */
    public Vector<Cliente> getClientiSelezionati() {
        return clientiSelezionati;
    }
    
}
